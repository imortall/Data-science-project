# -*- coding: utf-8 -*-
"""face recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9Ya-LJkFBTASTNJaUVpMQ7Fo81sJT4o
"""

import os
import numpy as np
import cv2
from sklearn.decomposition import PCA
from sklearn.svm import SVC
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

def load_images_from_folder(folder_path,target_size=(92,112)):
  images=[]
  labels=[]
  for subdir in os.listdir(folder_path):
    subfolder_path=os.path.join(folder_path,subdir)
    if not os.path.isdir(subfolder_path):
      continue

    label=int(subdir[1:])
    for filename in os.listdir(subfolder_path):
      image_path=os.path.join(subfolder_path,filename)
      image=cv2.imread(image_path,cv2.IMREAD_GRAYSCALE)
      if image is not None:
        image=cv2.resize(image,target_size)
        images.append(image)
        labels.append(label)
  return np.array(images),np.array(labels)

dataset_folder="drive/MyDrive/ORL"
images,labels=load_images_from_folder(dataset_folder)
print("Number of images loaded",len(images))
print("Number of labels loaded",len(labels))

from google.colab import drive
drive.mount('/content/drive')

from sklearn.model_selection import  train_test_split
X_train,X_test,y_train,y_test=train_test_split(images,labels,test_size=0.2,random_state=42)

X_train.shape

X_test.shape

nsamples, nx, ny=X_train.shape
d2_train_dataset=X_train.reshape((nsamples,nx*ny))
d2_train_dataset

nsamples, nx, ny=X_test.shape
d2_test_dataset=X_test.reshape((nsamples,nx*ny))
d2_test_dataset

n=80
pca=PCA(n_components=n,random_state=42)
X_train_pca=pca.fit_transform(d2_train_dataset)
X_test_pca=pca.transform(d2_test_dataset)

svm_classifier=SVC()
svm_classifier.fit(X_train_pca,y_train)

y_pred=svm_classifier.predict(X_test_pca)
y_pred

accuracy=accuracy_score(y_test,y_pred)
print('Accuracy',accuracy)

print(classification_report(y_test,y_pred))

print(confusion_matrix(y_test,y_pred))

plt.figure(figsize=(10,8))
for i in range(20):
  plt.subplot(4,7,i+1)
  plt.imshow(X_test[i],cmap='gray')
  plt.title(f"Predicted:{y_pred[i]}\nTrue:{y_test[i]}")
  plt.axis('off')
plt.show()

from skimage.io import imread
from skimage.transform import resize
pgm_image_path='drive/MyDrive/ORL/s38/5.pgm'
pgm_image=imread(pgm_image_path)
nsamples, nx, ny=(1,112,92)
flattened_image=pgm_image.reshape((nsamples,nx*ny))
image_pca=pca.transform(flattened_image)
predicted_label=svm_classifier.predict(image_pca)
predicted_label

plt.figure(figsize=(92,112))
for i,(image,label) in enumerate(zip(pgm_image,predicted_label)):
  plt.subplot(1,len(pgm_image),1)
  plt.imshow(pgm_image,cmap='gray')
  plt.title(f"Predicted label:{label}")
  plt.axis('off')
plt.show()